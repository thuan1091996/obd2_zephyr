<?xml version="1.0" encoding="UTF-8"?>
<model version="5.2.5" links="1">
 <documentation>About this example:
-------------------
Simple &quot;Blinky&quot; console application for workstations (Windows, Linux, MacOS)
(see &quot;QM Tutorial&quot; at: https://www.state-machine.com/qm/gs_tut.html)

This example demonstrates:
- Active object (Blinky) with state machine
- Board Support Package abstraction for portability
- BSP implementation for desktop OS (Windows, Linux, MacOS)
- Platform-independent main() function
- Makefile to build the generated code on desktop OS (Windows, Linux, MacOS)
- Customized tools for building the generated code directly from QM

Building the example:
---------------------
To build this example, you will need the QP/C framework installed on your computer and the GNU-GCC compiler. Both of them will be available if you install the QP-bundle from:

https://www.state-machine.com/#Downloads

Running the example:
--------------------
This example is a simple console application, which you can run from a terminal.

For more QM examples for QP/C see:
https://www.state-machine.com/qpc/exa.html</documentation>
 <!--${qpc}-->
 <framework name="qpc"/>
 <!--${AOs}-->
 <package name="AOs" stereotype="0x02">
  <!--${AOs::ble}-->
  <class name="ble" superclass="qpc::QActive">
   <!--${AOs::ble::timeEvt}-->
   <attribute name="timeEvt" type="QTimeEvt" visibility="0x02" properties="0x00"/>
   <!--${AOs::ble::SM}-->
   <statechart properties="0x01">
    <!--${AOs::ble::SM::initial}-->
    <initial target="../1">
     <initial_glyph conn="2,3,4,3,5,11">
      <action box="0,6,14,3"/>
     </initial_glyph>
    </initial>
    <!--${AOs::ble::SM::initial}-->
    <state name="initial">
     <entry brief="ble_init();"/>
     <!--${AOs::ble::SM::initial::BLE_RDY_SIG}-->
     <tran trig="BLE_RDY_SIG" target="../../2">
      <tran_glyph conn="28,14,1,3,13">
       <action box="1,-2,12,3"/>
      </tran_glyph>
     </tran>
     <state_glyph node="13,6,15,25">
      <entry box="1,2,12,5"/>
     </state_glyph>
    </state>
    <!--${AOs::ble::SM::ready}-->
    <state name="ready">
     <!--${AOs::ble::SM::ready::BLE_ADV_STARTED_SIG}-->
     <tran trig="BLE_ADV_STARTED_SIG" target="../../3">
      <tran_glyph conn="65,14,1,3,21">
       <action box="1,-2,25,5"/>
      </tran_glyph>
     </tran>
     <!--${AOs::ble::SM::ready::BLE_TRIGGER_ADV_START_SIG}-->
     <tran trig="BLE_TRIGGER_ADV_START_SIG">
      <action brief="ble_adv_start"/>
      <tran_glyph conn="41,16,3,-1,17">
       <action box="0,-2,25,4"/>
      </tran_glyph>
     </tran>
     <state_glyph node="41,6,24,25"/>
    </state>
    <!--${AOs::ble::SM::advertising}-->
    <state name="advertising">
     <entry brief="Start timer timeout"/>
     <exit>Stop advertising();
Stop timer timeout</exit>
     <!--${AOs::ble::SM::advertising::BLE_ADV_STOPPED_SIG}-->
     <tran trig="BLE_ADV_STOPPED_SIG" target="../../2">
      <tran_glyph conn="86,22,3,1,-21">
       <action box="-20,-3,21,4"/>
      </tran_glyph>
     </tran>
     <!--${AOs::ble::SM::advertising::TIMEOUT_SIG}-->
     <tran trig="TIMEOUT_SIG" target="../../2">
      <tran_glyph conn="86,26,3,1,-21">
       <action box="-15,-2,13,2"/>
      </tran_glyph>
     </tran>
     <!--${AOs::ble::SM::advertising::BLE_CONNECTED_SIG}-->
     <tran trig="BLE_CONNECTED_SIG" target="../../4">
      <tran_glyph conn="99,31,2,1,17,-13">
       <action box="-5,12,19,7"/>
      </tran_glyph>
     </tran>
     <state_glyph node="86,6,24,25">
      <entry box="1,2,20,6"/>
      <exit box="1,8,21,8"/>
     </state_glyph>
    </state>
    <!--${AOs::ble::SM::connected}-->
    <state name="connected">
     <!--${AOs::ble::SM::connected::BLE_DISCONNECTED_SIG}-->
     <tran trig="BLE_DISCONNECTED_SIG" target="../../2">
      <tran_glyph conn="62,54,3,2,-11,-23">
       <action box="-19,1,23,3"/>
      </tran_glyph>
     </tran>
     <!--${AOs::ble::SM::connected::NUS_RX}-->
     <tran trig="NUS_RX">
      <action>Post event to OBD</action>
      <tran_glyph conn="62,48,3,-1,17">
       <action box="0,-2,16,4"/>
      </tran_glyph>
     </tran>
     <state_glyph node="62,42,24,25"/>
    </state>
    <state_diagram size="248,93"/>
   </statechart>
  </class>
  <!--${AOs::obd}-->
  <class name="obd" superclass="qpc::QActive">
   <!--${AOs::obd::SM}-->
   <statechart properties="0x00">
    <!--${AOs::obd::SM::initial}-->
    <initial target="../1">
     <initial_glyph conn="6,12,5,3,16">
      <action box="0,-2,14,3"/>
     </initial_glyph>
    </initial>
    <!--${AOs::obd::SM::active}-->
    <state name="active">
     <state_glyph node="22,8,18,20"/>
    </state>
    <state_diagram size="80,50"/>
   </statechart>
  </class>
 </package>
</model>
